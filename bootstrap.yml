imports:
  - file: bootstrap.d/apps-arch.yml
  - file: bootstrap.d/apps-editors.yml
  - file: bootstrap.d/apps-shells.yml
  - file: bootstrap.d/games-fps.yml
  - file: bootstrap.d/dev-db.yml
  - file: bootstrap.d/dev-lang.yml
  - file: bootstrap.d/dev-libs.yml
  - file: bootstrap.d/dev-util.yml
  - file: bootstrap.d/media-gfx.yml
  - file: bootstrap.d/media-fonts.yml
  - file: bootstrap.d/media-libs.yml
  - file: bootstrap.d/sys-auth.yml
  - file: bootstrap.d/sys-apps.yml
  - file: bootstrap.d/sys-devel.yml
  - file: bootstrap.d/sys-libs.yml
  - file: bootstrap.d/x11-apps.yml
  - file: bootstrap.d/x11-base.yml
  - file: bootstrap.d/x11-libs.yml
  - file: bootstrap.d/x11-misc.yml
  - file: bootstrap.d/x11-themes.yml

general:
  everything_by_default: true

declare_options:
  - name: arch
    default: x86_64
  - name: arch-triple
    default: x86_64-toast

sources:
  - name: binutils
    subdir: toolchain
    git: 'git://sourceware.org/git/binutils-gdb.git'
    tag: 'binutils-2_32'
    version: '2.32'
    tools_required:
      - host-autoconf-v2.69
      - host-automake-v1.15
    regenerate:
      - args: ['autoreconf']
        workdir: '@THIS_SOURCE_DIR@/ld'

  - name: llvm
    subdir: 'ports'
    git: 'https://github.com/llvm/llvm-project'
    tag: 'llvmorg-10.0.0'
    version: '10.0.0'

  - name: gcc
    subdir: toolchain
    git: 'https://gcc.gnu.org/git/gcc.git'
    tag: 'releases/gcc-11.1.0'
    version: '11.1.0'
    tools_required:
      - host-autoconf-v2.69
      - host-automake-v1.11
    regenerate:
      - args: ['autoconf']
        workdir: '@THIS_SOURCE_DIR@/gcc'
      - args: ['autoconf']
        workdir: '@THIS_SOURCE_DIR@/libstdc++-v3'

  - name: mlibc
    subdir: 'toolchain'
    git: 'https://github.com/LittleCodingFox/mlibc.git'
    branch: 'feature/toastos'
    rolling_version: true
    version: '0.0pl@ROLLING_ID@'

  - name: wayland
    subdir: 'ports'
    git: 'https://github.com/wayland-project/wayland.git'
    tag: '1.21.0'
    version: '1.21.0'

tools:
  - name: host-autoconf-v2.64
    architecture: noarch
    source:
      name: autoconf-v2.64
      subdir: 'ports'
      url: 'https://ftp.gnu.org/gnu/autoconf/autoconf-2.64.tar.xz'
      format: 'tar.xz'
      extract_path: 'autoconf-2.64'
      version: '2.64'
    configure:
      # Despite its efforts to be POSIX-compatible, autoconf 2.64 fails to configure on dash
      # (as it assumes that echo does not evaluate backslash escapes).
      # It *also* fails when setting CONFIG_SHELL to /bin/bash.
      # The manual (in section "Defining Variables") mentions this bug and the following
      # workaround: We set *both* CONFIG_SHELL *and* execute the script using /bin/bash.
      - args: ['/bin/bash', '@THIS_SOURCE_DIR@/configure', '--prefix=@PREFIX@']
        environ:
          'CONFIG_SHELL': '/bin/bash'
    compile:
      - args: ['make', '-j@PARALLELISM@']
    install:
      - args: ['make', 'install']

  - name: host-autoconf-v2.69
    architecture: noarch
    source:
      name: autoconf-v2.69
      subdir: 'ports'
      url: 'https://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.xz'
      format: 'tar.xz'
      extract_path: 'autoconf-2.69'
      version: '2.69'
    configure:
      - args: ['@THIS_SOURCE_DIR@/configure', '--prefix=@PREFIX@']
    compile:
      - args: ['make', '-j@PARALLELISM@']
    install:
      - args: ['make', 'install']

  - name: host-automake-v1.11
    architecture: noarch
    source:
      name: automake-v1.11
      subdir: 'ports'
      git: 'https://git.savannah.gnu.org/git/automake.git'
      tag: 'v1.11.6'
      version: '1.11.6'
      tools_required:
        - host-autoconf-v2.69
      regenerate:
        - args: ['./bootstrap']
    tools_required:
      - host-autoconf-v2.69
    configure:
      - args:
        - '@THIS_SOURCE_DIR@/configure'
        - '--prefix=@PREFIX@'
        - 'MAKEINFO=/bin/true'
    compile:
      - args: ['make', '-j@PARALLELISM@']
    install:
      - args: ['make', 'install']
      # Stop aclocal from complaining.
      - args: ['ln', '-sf', '@PREFIX@/share/aclocal-1.11', '@PREFIX@/share/aclocal']

  - name: host-autoconf-archive
    architecture: noarch
    exports_aclocal: true
    source:
      subdir: 'ports'
      git: 'https://github.com/autoconf-archive/autoconf-archive.git'
      tag: 'v2019.01.06'
      version: '2019.01.06'
    install:
      - args: ['mkdir', '-p', '@BUILD_ROOT@/tools/host-autoconf-archive/share/']
      - args: ['cp', '-r', '@THIS_SOURCE_DIR@/m4', '@BUILD_ROOT@/tools/host-autoconf-archive/share/aclocal']

  - name: host-automake-v1.15
    architecture: noarch
    source:
      name: automake-v1.15
      subdir: 'ports'
      git: 'https://git.savannah.gnu.org/git/automake.git'
      tag: 'v1.15.1'
      version: '1.15.1'
      tools_required:
        - host-autoconf-v2.69
      regenerate:
        - args: ['./bootstrap']
    tools_required:
      - host-autoconf-v2.69
    configure:
      - args:
        - '@THIS_SOURCE_DIR@/configure'
        - '--prefix=@PREFIX@'
        - 'MAKEINFO=/bin/true'
    compile:
      - args: ['make']
    install:
      - args: ['make', 'install']
      # Stop aclocal from complaining.
      - args: ['ln', '-sf', '@PREFIX@/share/aclocal-1.15', '@PREFIX@/share/aclocal']
  
  - name: host-binutils
    from_source: binutils
    configure:
      - args:
        - '@THIS_SOURCE_DIR@/configure'
        - '--prefix=@PREFIX@'
        - '--target=@OPTION:arch-triple@'
        - '--with-sysroot=@SYSROOT_DIR@'
        - '--disable-werror'
        - '--enable-shared'
        - '--enable-targets=x86_64-elf,x86_64-pe'
        - 'CFLAGS=-O2'
    compile:
      - args: ['make', '-j@PARALLELISM@', 'all-binutils', 'all-gas', 'all-ld']
    install:
      - args: ['make', 'install-binutils', 'install-gas', 'install-ld']
      - args: |
          for f in @PREFIX@/bin/@OPTION:arch-triple@-*; do
            tf=$(basename $f | sed 's/@OPTION:arch-triple@/@OPTION:arch-triple@-kernel/')
            ln -sf $(basename $f) @PREFIX@/bin/$tf
          done

  - name: host-gcc
    from_source: gcc
    tools_required:
      - tool: host-binutils
        recursive: true
    configure:
      - args:
        - '@THIS_SOURCE_DIR@/configure'
        - '--prefix=@PREFIX@'
        - '--target=@OPTION:arch-triple@'
        - '--with-sysroot=@SYSROOT_DIR@'
        - '--enable-languages=c,c++'
        - '--enable-shared'
        - '--disable-multilib'
        - '--enable-initfini-array'
        - '--enable-libstdcxx-filesystem-ts'
        - 'CFLAGS=-O2'
        - 'CXXFLAGS=-O2'
    stages:
      - name: compiler
        pkgs_required:
          - mlibc-headers
        compile:
          - args: ['mkdir', '-p', '@SYSROOT_DIR@/usr/include']
          - args: ['make', '-j@PARALLELISM@', 'all-gcc']
        install:
          - args: ['make', 'install-gcc']
          - args: ['mkdir', '-p', '@PREFIX@/@OPTION:arch-triple@/bin']
          - args: ['ln', '-sf', '../../../host-binutils/@OPTION:arch-triple@/bin/as',
                                '@PREFIX@/@OPTION:arch-triple@/bin/as']
          - args: ['ln', '-sf', '../../../host-binutils/@OPTION:arch-triple@/bin/ld',
                                '@PREFIX@/@OPTION:arch-triple@/bin/ld']

      - name: libgcc
        tools_required:
          - tool: host-gcc
            stage_dependencies: [compiler]
        pkgs_required:
          - mlibc
        compile:
          - args: ['make', '-j@PARALLELISM@', 'all-target-libgcc']
        install:
          - args: ['make', 'install-target-libgcc']

      - name: libstdc++
        tools_required:
          - tool: host-gcc
            stage_dependencies: [libgcc]
        compile:
          - args: ['make', '-j@PARALLELISM@', 'all-target-libstdc++-v3']
        install:
          - args: ['make', 'install-target-libstdc++-v3']
  
  - name: host-libtool
    architecture: noarch
    exports_aclocal: true
    source:
      name: libtool
      subdir: 'ports'
      git: 'https://git.savannah.gnu.org/git/libtool.git'
      tag: 'v2.4.6'
      version: '2.4.6'
      tools_required:
        - host-autoconf-v2.69
        - host-automake-v1.15
      regenerate:
        # libtool's ./bootstrap does a shallow clone with insufficient depth.
        - args: ['git', 'submodule', 'update', '--init']
        - args: ['./bootstrap']
    tools_required:
      - host-autoconf-v2.69
      - host-automake-v1.15
    configure:
      - args:
        - '@THIS_SOURCE_DIR@/configure'
        - '--prefix=@PREFIX@'
    compile:
      - args: ['make', '-j@PARALLELISM@']
    install:
      - args: ['make', 'install']
 
  - name: host-llvm-toolchain
    architecture: noarch
    from_source: llvm
    sources_required:
      - binutils
    tools_required:
      - host-cmake
    configure:
      - args:
        - 'cmake'
        - '-GNinja'
        - '-DCMAKE_INSTALL_PREFIX=@PREFIX@'

        # LLVM configuration options.
        # We really have to build LLVM in Release mode.
        # Building it in debug mode produces tens of GiB of debugging info.
        - '-DCMAKE_BUILD_TYPE=Release'
        - '-DLLVM_TARGETS_TO_BUILD=X86'
        - '-DLLVM_ENABLE_PROJECTS=clang;clang-tools-extra'

        # clang configuration options.
        - '-DDEFAULT_SYSROOT=@SYSROOT_DIR@'

        # Gold linker configuration options.
        - '-DLLVM_BINUTILS_INCDIR=@SOURCE_ROOT@/toolchain/binutils/include'

        - '@THIS_SOURCE_DIR@/llvm'
    compile:
      - args: ['ninja']
      # Build on a single CPU to prevent OOM on smaller systems.
      #- args: ['ninja', '-j1']
    install:
      - args: ['ninja', 'install']
        quiet: true

  - name: wayland-scanner
    labels: [aarch64]
    architecture: noarch
    from_source: wayland
    tools_required:
      - virtual: pkgconfig-for-host
        program_name: host-pkg-config
    configure:
      - args:
        - 'meson'
        - '--native-file'
        - '@SOURCE_ROOT@/scripts/meson.native-file'
        - '--prefix=@PREFIX@'
        - '-Ddtd_validation=false'
        - '-Ddocumentation=false'
        - '-Dscanner=true'
        - '-Dlibraries=false'
        - '-Dtests=false'
        - '@THIS_SOURCE_DIR@'
    compile:
      - args: ['ninja']
    install:
      - args: ['ninja', 'install']

packages:
  - name: binutils
    metadata:
      summary: Tools necessary to build programs
      description: This package provides various tools commonly used during package development, including the GNU linker and the GNU assembler. This package also includes libbfd and libopcodes.
      spdx: 'GPL-3.0-or-later'
      website: 'https://www.gnu.org/software/binutils/'
      maintainer: "Dennis Bonke <dennis@managarm.org>"
      categories: ['sys-devel']
    from_source: binutils
    tools_required:
      - tool: host-gcc
    pkgs_required:
      - mlibc
    revision: 2
    configure:
      - args:
        - '@THIS_SOURCE_DIR@/configure'
        - '--host=@OPTION:arch-triple@'
        - '--prefix=/usr'
        - '--target=@OPTION:arch-triple@'
        - '--with-sysroot=/'
        - '--disable-nls'
        # On recent compilers, binutils 2.26 causes implicit-fallthrough warnings, among others.
        - '--disable-werror'
        # -g blows up the binary size.
        - 'CFLAGS=-O2'
    build:
      #- args: ['make', '-j@PARALLELISM@', 'all-binutils', 'all-gas', 'all-ld']
      - args: ['make', 'all-binutils', 'all-gas', 'all-ld']
      - args: ['make', 'install-binutils', 'install-gas', 'install-ld']
        environ:
          DESTDIR: '@THIS_COLLECT_DIR@'
        quiet: true
  
  - name: boost
    metadata:
      summary: Boost development headers
      description: This package provides the Boost headers for C++.
      spdx: 'BSL-1.0'
      website: 'https://boost.org'
      maintainer: "Dennis Bonke <dennis@managarm.org>"
      categories: ['dev-libs']
    architecture: noarch
    source:
      subdir: 'ports'
      git: 'https://github.com/boostorg/boost.git'
      tag: 'boost-1.62.0'
      version: '1.62.0'
      regenerate:
        - args: |
            if ! git -C '@THIS_SOURCE_DIR@' remote | grep -q origin; then
              git -C '@THIS_SOURCE_DIR@' remote add origin https://github.com/boostorg/boost.git
            fi
        - args: ['git', '-C', '@THIS_SOURCE_DIR@', 'submodule', 'update', '--init']
        - args: ['./bootstrap.sh']
        - args: ['./b2', 'headers']
    configure: []
    build:
      - args: ['mkdir', '-p', '@THIS_COLLECT_DIR@/usr/include']
      - args: ['cp', '-r', '--dereference', '@THIS_SOURCE_DIR@/boost',
            '@THIS_COLLECT_DIR@/usr/include']

  - name: llvm
    from_source: llvm
    tools_required:
      - host-cmake
      - host-gcc
    pkgs_required:
      - mlibc
      - zlib
    revision: 3
    configure:
      - args:
        - 'cmake'
        - '-GNinja'
        - '-DCMAKE_TOOLCHAIN_FILE=@SOURCE_ROOT@/scripts/CMakeToolchain-@OPTION:arch-triple@.txt'
        - '-DCMAKE_INSTALL_PREFIX=/usr'
        # We really have to build LLVM in Release mode.
        # Building it in debug mode produces tens of GiB of debugging info.
        - '-DCMAKE_BUILD_TYPE=Release'
        - '-DLLVM_LINK_LLVM_DYLIB=ON'
        # RTTI affects the ABI. Hence, we enable it.
        - '-DLLVM_ENABLE_RTTI=ON'
        - '-DLLVM_TARGETS_TO_BUILD=X86'
        - '-DLLVM_TARGET_ARCH=x86_64'
        - '-DLLVM_DEFAULT_TARGET_TRIPLE=@OPTION:arch-triple@'
        - '-DLLVM_HOST_TRIPLE=@OPTION:arch-triple@'
        # Disable linking against ncurses, which we do not build with -fPIC.
        - '-DLLVM_ENABLE_TERMINFO=OFF'
        - '@THIS_SOURCE_DIR@/llvm'
    build:
      - args: ['ninja']
      - args: ['ninja', 'install']
        environ:
          DESTDIR: '@THIS_COLLECT_DIR@'
        quiet: true

  - name: mlibc-headers
    from_source: mlibc
    revision: 2
    implict_package: true
    configure:
      - args:
        - 'meson'
        - '--cross-file'
        - '@SOURCE_ROOT@/cross_file.txt'
        - '--prefix=/usr'
        - '-Dheaders_only=true'
        #- '-Ddisable_iconv_option=true'
        - '-Ddisable_intl_option=true'
        - '@THIS_SOURCE_DIR@'
    build:
      - args: ['ninja']
      - args: ['ninja', 'install']
        environ:
          DESTDIR: '@THIS_COLLECT_DIR@'

  - name: mlibc
    from_source: mlibc
    revision: 2
    tools_required:
      - tool: host-gcc
        stage_dependencies: [compiler]
    implict_package: true
    pkgs_required:
      - mlibc-headers
    configure:
      - args:
        - 'meson'
        - '--cross-file'
        - '@SOURCE_ROOT@/cross_file.txt'
        - '--prefix=/usr'
        - '--libdir=lib'
        - '--buildtype=debugoptimized'
        - '-Dmlibc_no_headers=true'
        #- '-Ddisable_iconv_option=true'
        - '-Ddisable_intl_option=true'
        - '@THIS_SOURCE_DIR@'
    build:
      - args: ['ninja']
      - args: ['ninja', 'install']
        environ:
          DESTDIR: '@THIS_COLLECT_DIR@'
      - args: ['ln', '-sf', 'crt0.o', '@THIS_COLLECT_DIR@/usr/lib/crt1.o']
  
  - name: zlib
    metadata:
      summary: Standard (de)compression library
      description: This package provides some common compression and decompression functions used by various programs.
      spdx: 'Zlib'
      website: 'https://zlib.net'
      maintainer: "Dennis Bonke <dennis@managarm.org>"
      categories: ['sys-libs']
    source:
      subdir: 'ports'
      git: 'https://github.com/madler/zlib.git'
      tag: 'v1.2.11'
      version: '1.2.11'
    tools_required:
      - host-gcc
    pkgs_required:
      - mlibc
    configure:
      - args:
        - '@THIS_SOURCE_DIR@/configure'
        environ:
          CHOST: '@OPTION:arch-triple@'
          prefix: '/usr'
    build:
      - args: ['make', '-j@PARALLELISM@']
      - args: ['make', 'install']
        environ:
          DESTDIR: '@THIS_COLLECT_DIR@'
        quiet: true

  - name: lua
    source:
      subdir: ports
      url: 'https://www.lua.org/ftp/lua-5.3.5.tar.gz'
      format: 'tar.gz'
      extract_path: 'lua-5.3.5'
      version: '5.3.5'
    tools_required:
      - host-gcc
    pkgs_required:
      - mlibc
    configure:
      - args: ['cp', '-r', '@THIS_SOURCE_DIR@/.', '@THIS_BUILD_DIR@']
      - args:
        - 'sed'
        - '-i'
        - 's|^#define LUA_ROOT "/usr/local/"$|#define LUA_ROOT "/usr/"|'
        - 'src/luaconf.h'
    build:
      - args:
        - 'make'
        - 'generic'
        - 'CC=@OPTION:arch-triple@-gcc'
        - 'AR=@OPTION:arch-triple@-ar rcu'
        - 'RANLIB=@OPTION:arch-triple@-ranlib'
        - '-j@PARALLELISM@'
      - args: ['make', 'install', 'INSTALL_TOP=@THIS_COLLECT_DIR@/usr']
        quiet: true

  - name: gcc
    from_source: gcc
    tools_required:
      - tool: host-gcc
      - host-automake-v1.15
    pkgs_required:
      - mlibc
      - gmp
      - mpfr
      - mpc
      - zlib
    configure:
      - args:
        - '@THIS_SOURCE_DIR@/configure'
        - '--host=@OPTION:arch-triple@'
        - '--prefix=/usr'
        - '--target=@OPTION:arch-triple@'
        - '--with-sysroot=/'
        - '--with-build-sysroot=@SYSROOT_DIR@'
        - '--enable-languages=c,c++'
        - '--enable-initfini-array'
        - '--disable-multilib'
        - '--disable-nls'
        - '--enable-lto'
        - '--with-system-zlib'
        # -g blows up GCC's binary size.
        - 'CFLAGS=-O2'
        - 'CXXFLAGS=-O2'
    build:
      - args: ['make', 'all-gcc', 'all-target-libgcc', 'all-target-libstdc++-v3', '-j@PARALLELISM@']
      - args: ['make', 'install-gcc', 'install-target-libgcc', 'install-target-libstdc++-v3']
        environ:
          DESTDIR: '@THIS_COLLECT_DIR@'
        quiet: true
      - args: ['ln', '-sf', 'gcc', '@THIS_COLLECT_DIR@/usr/bin/cc']

  - name: toastgraphics
    source:
      subdir: 'klibbuilds'
      git: 'https://github.com/LittleCodingFox/ToastOS.git'
      branch: 'master'
      rolling_version: true
      version: '0.0pl@ROLLING_ID@'
    tools_required:
      - host-gcc
    pkgs_required:
      - mlibc
      - binutils
      - mesa
    build:
      - args: |
          cd "@THIS_SOURCE_DIR@/klibs/ToastGraphics"
          make DESTDIR="@THIS_COLLECT_DIR@"

  - name: toastinput
    source:
      subdir: 'klibbuilds'
      git: 'https://github.com/LittleCodingFox/ToastOS.git'
      branch: 'master'
      rolling_version: true
      version: '0.0pl@ROLLING_ID@'
    tools_required:
      - host-gcc
    pkgs_required:
      - mlibc
      - binutils
    build:
      - args: |
          cd "@THIS_SOURCE_DIR@/klibs/ToastInput"
          make DESTDIR="@THIS_COLLECT_DIR@"
  
  - name: wayland
    labels: [aarch64]
    architecture: '@OPTION:arch@'
    from_source: wayland
    tools_required:
      - host-pkg-config
      - host-gcc
      - wayland-scanner
      - host-libtool
      - virtual: pkgconfig-for-target
        triple: "@OPTION:arch-triple@"
      - virtual: pkgconfig-for-host
        program_name: host-pkg-config
    pkgs_required:
      - mlibc
      - libexpat
      - libffi
    configure:
      - args:
        - 'meson'
        - '--native-file'
        - '@SOURCE_ROOT@/scripts/meson.native-file'
        - '--cross-file'
        - '@SOURCE_ROOT@/scripts/meson-@OPTION:arch-triple@.cross-file'
        - '--prefix=/usr'
        - '--buildtype=debugoptimized'
        - '-Ddtd_validation=false'
        - '-Ddocumentation=false'
        - '-Dscanner=false'
        - '@THIS_SOURCE_DIR@'
        environ:
          PKG_CONFIG_SYSROOT_DIR: '@BUILD_ROOT@/system-root'
    build:
      - args: ['ninja']
      - args: ['ninja', 'install']
        environ:
          DESTDIR: '@THIS_COLLECT_DIR@'

  - name: eudev
    labels: [aarch64]
    architecture: '@OPTION:arch@'
    source:
      subdir: 'ports'
      git: 'https://github.com/gentoo/eudev.git'
      tag: 'v3.2.10'
      version: '3.2.10'
      tools_required:
        - host-autoconf-v2.69
        - host-automake-v1.11
        - host-libtool
        - host-pkg-config
      regenerate:
        - args: ['./autogen.sh']
    tools_required:
      - host-gcc
    pkgs_required:
      - mlibc
    revision: 4
    configure:
      - args:
        - '@THIS_SOURCE_DIR@/configure'
        - '--host=@OPTION:arch-triple@'
        - '--prefix=/usr'
        - '--with-sysroot=@SYSROOT_DIR@' # Set libtool's lt_sysroot.
        - '--disable-blkid'
        - '--disable-selinux'
        - '--disable-kmod'
        - '--disable-mtd-probe'
        - '--disable-rule-generator'
        - '--enable-introspection=no'
    build:
      - args: ['make', '-j@PARALLELISM@']
      - args: ['make', 'install']
        environ:
          DESTDIR: '@THIS_COLLECT_DIR@'
        quiet: true
      - args: ['touch', '@THIS_COLLECT_DIR@/usr/etc/udev/rules.d/.keep']
